{"name":"CRELAY","tagline":"Controlling relay cards for home automation with a Linux software","body":"# crelay\r\n#### Controlling different relay cards for home automation with a Linux software\r\n\r\n### About\r\nThis software is intended to run on Linux systems to control different relay cards in a unified way. It provides several interfaces for controlling the relays locally or remotely. The relays can be controlled by a human being via a device like smartphone or web browser, or directly by an intelligent device as used in the Internet of Things.  \r\nThe software was designed with the following requirements in mind:  \r\n\r\n - simple, intuitive usage and interface\r\n - as little dependencies as possible (libraries, external programs)\r\n - runs on different Linux distributions, different hardware platforms\r\n - lightweight, can run on simple devices\r\n - easily expandable (adding relay card types and user interfaces)\r\n\r\nNew relay cards support can be added by providing the cards driver code for detecting the card, reading and setting the relays.\r\nCurrently the following relay cards are supported:  \r\n\r\n- Conrad USB 4-channel relay card (http://www.conrad.de/ce/de/product/393905), see <i>Note 1</i> below\r\n- Sainsmart USB 4-channel relay card (http://www.sainsmart.com/sainsmart-4-channel-5v-usb-relay-board-module-controller-for-automation-robotics.html), see <i>Note 2</i> below\r\n- HID API compatible relay cards (1/2/4/8 channel)\r\n- Generic GPIO controlled relays, see <i>Note 3</i> below  \r\n<br>\r\n\r\nThe following picture shows a high level view on the modular software architecture.  \r\n![Software architechture](screenshots/sw-architecture.png)\r\n<br><br>\r\n\r\n### Features\r\n- Command line mode and daemon mode with Web GUI\r\n- Automatic detection of communication port\r\n- Reading of current relay states\r\n- Setting of new relay states\r\n- Single pulse generation on relay contact\r\n- HTTP API for external clients (e.g. Smartphone/tablet apps)\r\n- Multiple relay card type support  \r\n<br>\r\n\r\n### Coming soon (to do)\r\n- ThingSpeak Talkback App (https://thingspeak.com/docs/talkback)\r\n- Support for configuration file for custom parameters  \r\n<br>\r\n\r\n### Nice to have (wishlist)\r\n- Multiple cards support\r\n- Access control for Web GUI and HTTP API\r\n- Programmable timers for relay actions  \r\n<br>\r\n\r\n### Screenshots\r\n\r\n#### Web GUI\r\n![Screenshot](screenshots/crelay-screenshot1.png)\r\n<br><br>\r\n![Screenshot](screenshots/crelay-screenshot2.png)\r\n<br><br>\r\n\r\n#### Command line interface\r\n    $ crelay \r\n    crelay, version 0.7\r\n    \r\n    This utility provides a unified way of controlling different types of relay cards.\r\n    Currently supported relay cards:\r\n      - Conrad USB 4-channel relay card\r\n      - Sainsmart USB 4-channel relay card\r\n      - Generic GPIO relays\r\n      - HID API compatible relay card\r\n    The card which is detected first will be used. \r\n    \r\n    The program can be run in interactive (command line) mode or in daemon mode with\r\n    built-in web server.\r\n\r\n    Interactive mode:\r\n        crelay -i | [<relay number>] [ON|OFF]\r\n\r\n           The state of any relay can be read or it can be changed to a new state.\r\n           If only the relay number is provided then the current state is returned,\r\n           otherwise the relays state is set to the new value provided as second parameter.\r\n           The USB communication port is auto detected. The first compatible device\r\n           found will be used.\r\n\r\n    Daemon mode:\r\n        crelay -d [<relay1_label> [<relay2_label> [<relay3_label> [<relay4_label>]]]] \r\n    \r\n           In daemon mode the built-in web server will be started and the relays\r\n           can be completely controlled via a Web browser GUI or HTTP API.\r\n           Optionally a personal label for each relay can be supplied which will\r\n           be displayed next to the relay name on the web page.\r\n    \r\n           To access the web interface point your Web browser to the following address:\r\n           http://<my-ip-address>:8000\r\n    \r\n           To use the HTTP API send a POST or GET request from the client to this URL:\r\n           http://<my-ip-address>:8000/gpio\r\n<br>  \r\n\r\n### HTTP API\r\nAn HTTP API is provided to access the server from external clients. This API is compatible with the PiRelay Android app. Therefore this app can be used on your Android phone to control <i>crelay</i> remotely.\r\n\r\n- API url:  \r\n<pre><i>ip_address[:port]</i>/gpio</pre>  \r\n\r\n- Method:  \r\n<pre>POST or GET</pre>  \r\n\r\n- Reading relay states  \r\nRequired Parameter: none  \r\n\r\n- Setting relay state  \r\nRequired Parameter: <pre>pin=[1|2|3|4], status=[0|1|2] where 0=off 1=on 2=pulse</pre>  \r\n\r\n- Response from server:  \r\n<pre>\r\nRelay 1:[0|1]\r\nRelay 2:[0|1]\r\nRelay 3:[0|1]\r\nRelay 4:[0|1]\r\n</pre>  \r\n<br>\r\n\r\n### Installation from source\r\nThe installation procedure is usually perfomed directly on the target system. Therefore a C compiler and friends should already be installed. Otherwise a cross compilation environment needs to be setup on a PC (this is not described here).  \r\n\r\n* Install dependencies (package names may vary depending on your distribution):\r\n<pre>\r\n    apt-get install libftdi1 libftdi-dev libhidapi-libusb0 libhidapi-dev libusb-1.0-0 libusb-1.0-0-dev\r\n</pre>\r\n\r\n* Build dependencies from source (optional):  \r\nOn some not so recent Linux distributions (like Debian Weezy) the HIDAPI library is not yet packaged, so it needs to be build from the source code. Follow these instructions to do that:\r\n<pre>\r\n    apt-get install libudev-dev libusb-1.0-0-dev\r\n    git clone git://github.com/signal11/hidapi.git\r\n    ./bootstrap\r\n    ./configure\r\n    make\r\n    sudo make install\r\n</pre>\r\n\r\n* Clone crelay git repository :  \r\n<pre>\r\n    git clone https://github.com/ondrej1024/crelay\r\n    cd crelay\r\n</pre>\r\n\r\n* Alternatively get latest source code version :  \r\n<pre>\r\n    wget https://github.com/ondrej1024/crelay/archive/master.zip\r\n    unzip master.zip\r\n    cd crelay-master\r\n</pre>\r\n\r\n* Build and install :  \r\n<pre>\r\n    cd src\r\n    make [DRV_CONRAD=n] [DRV_SAINSMART=n] [DRV_HIDAPI=n]\r\n    sudo make install\r\n</pre>\r\n<i>Note:</i> Optionally, you can exclude specific relay card drivers (and their dependencies) from the build, if you don't need them. To do this, specify the driver name as parameter of the \"make\" command as shown above.\r\n<br>\r\n\r\n### Installation of prebuilt binaries\r\nTo save you the hassle of building crelay from source, prebuild binaries are provided for selected architectures. Just save the binary from the bin/<arch> directory on your host system and execute it.  \r\n\r\n<i>Note:</i> The binaries use shared librabries, so you might need to install the needed libs to your system, if not already done previously:  \r\n<pre>\r\n    apt-get install libftdi1 libhidapi-libusb0 libusb-1.0-0\r\n</pre>  \r\n  \r\n  \r\n### Adding new relay card drivers\r\nThe modular architecture of *crelay* makes it possible to easily add new relay card drivers.  \r\nSee example files `relay_drv_sample.c` and `relay_drv_sample.h` in the src directory for details on how to write your own low level driver functions.  \r\n<br>  \r\n\r\n##### <i>Note 1 (Conrad USB 4-channel relay card)</i>:\r\nThe relay card software provided by Conrad is Windows only and uses a binary runtime DLL which implements the communication protocol between the host computer and the card. Thanks to a raspberrypi.org forum member, the communication protocol was discovered and made public. This made it possible to develop an open source driver for the Conrad card which can run on any Linux distribution.\r\n\r\nEarlier versions of this program needed the cp210x kernel driver for the Silabs CP2104 chip with GPIO support. The official in-kernel cp210x driver does not  support GPIO operations. Therefore the Silabs driver from their home page needed to be used:\r\nhttp://www.silabs.com/products/mcu/pages/usbtouartbridgevcpdrivers.aspx\r\n\r\nThe current version of *crelay* uses libusb to talk directly to the CP2104 on the Conrad card, therefore the cp210x kernel driver is **not needed** anymore.\r\n<br>  \r\n\r\n##### <i>Note 2 (Sainsmart USB 4-channel relay card)</i>:\r\nThe Sainsmart card uses the FTDI FT245RL chip. This chip is controlled directly through the open source libFTDI library. No Kernel driver is needed. However on most Linux distributions, the *ftdi_sio* serial driver is automatically loaded when the FT245RL chip is detected. In order to grant the <i>crelay</i> software access to the card, the default driver needs to be unloaded:  \r\n\r\n    rmmod ftdi_sio\r\n\r\nTo prevent automatic loading of the driver, add the following line to /etc/modprobe.d/blacklist.conf:  \r\n\r\n    blacklist ftdi_sio\r\n    \r\n<br>  \r\n\r\n##### <i>Note 3 (GPIO controlled relays)</i>:\r\nThe following GPIO pins are defined as factory default in relay_drv_gpio.c. Change these if you want to control different pins.\r\n<pre>\r\n #define RELAY1_GPIO_PIN 17 // GPIO 0\r\n #define RELAY2_GPIO_PIN 18 // GPIO 1\r\n #define RELAY3_GPIO_PIN 27 // GPIO 2 (RPi rev.2)\r\n #define RELAY4_GPIO_PIN 22 // GPIO 3\r\n #define RELAY5_GPIO_PIN 23 // GPIO 4\r\n #define RELAY6_GPIO_PIN 24 // GPIO 5\r\n #define RELAY7_GPIO_PIN 25 // GPIO 6\r\n #define RELAY8_GPIO_PIN  4 // GPIO 7\r\n</pre>\r\n\r\nIn order to be able to access the GPIO pins you need to run as superuser, therefore crelay needs to be executed with the <i>sudo</i> command on a multiuser system.\r\n","google":"UA-48477283-1","note":"Don't delete this file! It's used internally to help with page regeneration."}